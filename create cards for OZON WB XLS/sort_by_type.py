import os
import math
import io
import pandas as pd
from tkinter import Tk, filedialog
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from PyPDF2 import PdfMerger, PdfReader, PdfWriter

# –í—ã–±–æ—Ä Excel-—Ñ–∞–π–ª–∞
Tk().withdraw()
excel_file_path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", filetypes=[("Excel files", "*.xlsx")])
if not excel_file_path:
    raise Exception("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")

output_dir = os.path.dirname(excel_file_path)

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
barcode_path = r"C:\Users\Max\Documents\GitHub\Ozon_upload\barcode\Data path barcode.xlsx"

# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
df_main = pd.read_excel(excel_file_path)
df_barcode = pd.read_excel(barcode_path)

if "–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å" not in df_barcode.columns:
    raise KeyError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å' –≤ barcode-—Ñ–∞–π–ª–µ")

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
merged_df = pd.merge(df_main, df_barcode, on="–ê—Ä—Ç–∏–∫—É–ª")
merged_df = merged_df.sort_values(by=["–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å", "Num_Copies"], ascending=[True, False])
merged_df = merged_df[merged_df['Num_Copies'] != 0]

# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ Num_Copies
def adjust_num_copies(row):
    if row["–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å"] in ["1_–∞4", "6_–∞4_–Ω–∞—Å—Ç—Ä–æ–π–∫–∏_60", "3_—Ç–µ—Ä–º–æ–±–∏—Ä–∫–∏"]:
        return math.ceil(row["Num_Copies"] / 2) * 2
    elif row["–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å"] == "2_–∞5":
        return math.ceil(row["Num_Copies"] / 4) * 4
    return row["Num_Copies"]

merged_df["Num_Copies"] = merged_df.apply(adjust_num_copies, axis=1)
columns_to_keep = list(df_main.columns) + ["–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å"]
columns_to_keep = [col for col in columns_to_keep if col in merged_df.columns]
sorted_path = excel_file_path.replace('.xlsx', '_sorted.xlsx')
merged_df[columns_to_keep].to_excel(sorted_path, index=False, engine='openpyxl')

# –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ Excel + –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø
wb = load_workbook(sorted_path)
sheet = wb.active
fill_colors = ["FFFF99", "99CCFF", "FFCCCC", "CCFFCC", "CCCCFF"]
special_fill = "FFA07A"

# –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
num_col = None
type_col = None
for col in range(1, sheet.max_column + 1):
    val = sheet.cell(row=1, column=col).value
    if val == "Num_Copies":
        num_col = col
    elif val == "–¢–∏–ø —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å":
        type_col = col

MAX_GROUP = 350
sum_counter = 0
group_rows = []
color_index = 0
special_rows = []
all_groups = []

for row in range(2, sheet.max_row + 1):
    copies = sheet.cell(row=row, column=num_col).value
    group_type = sheet.cell(row=row, column=type_col).value

    if group_type == "6_–∞4_–Ω–∞—Å—Ç—Ä–æ–π–∫–∏_60":
        special_rows.append(row)
        continue

    if copies is not None:
        if sum_counter + copies > MAX_GROUP:
            color = fill_colors[color_index]
            for r in group_rows:
                for c in range(1, sheet.max_column + 1):
                    sheet.cell(row=r, column=c).fill = PatternFill(start_color=color, end_color=color, fill_type="solid")
            all_groups.append(group_rows[:])
            group_rows = []
            sum_counter = 0
            color_index = (color_index + 1) % len(fill_colors)

        sum_counter += copies
        group_rows.append(row)

# –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞
if group_rows:
    color = fill_colors[color_index]
    for r in group_rows:
        for c in range(1, sheet.max_column + 1):
            sheet.cell(row=r, column=c).fill = PatternFill(start_color=color, end_color=color, fill_type="solid")
    all_groups.append(group_rows[:])

# –°–ø–µ—Ü-–≥—Ä—É–ø–ø–∞
for r in special_rows:
    for c in range(1, sheet.max_column + 1):
        sheet.cell(row=r, column=c).fill = PatternFill(start_color=special_fill, end_color=special_fill, fill_type="solid")

wb.save(sorted_path)

# –ß—Ç–µ–Ω–∏–µ –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
df_sorted = pd.read_excel(sorted_path, engine='openpyxl')

# –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø
for idx, group in enumerate(all_groups, start=1):
    df_group = df_sorted.iloc[[r - 2 for r in group]]  # Excel ‚Üí DataFrame index
    p_file = os.path.join(output_dir, f"p{idx}.xlsx")
    df_group.to_excel(p_file, index=False, engine='openpyxl')
    print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {idx} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {p_file}")

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PDF
    df_paths = pd.read_excel(barcode_path)
    df_merged = pd.merge(df_group, df_paths[['–ê—Ä—Ç–∏–∫—É–ª', 'Local_PDF_Path_Column_Name']], on='–ê—Ä—Ç–∏–∫—É–ª', how='left')

    missing = df_merged[df_merged['Local_PDF_Path_Column_Name'].isna()]
    if not missing.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç –ø—É—Ç–∏ –∫ PDF –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {missing['–ê—Ä—Ç–∏–∫—É–ª'].tolist()}")

    merger = PdfMerger()
    for _, row in df_merged.iterrows():
        pdf_path = row['Local_PDF_Path_Column_Name']
        num_copies = int(row['Num_Copies'])

        if not os.path.isfile(pdf_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
            continue

        try:
            reader = PdfReader(pdf_path)
            if len(reader.pages) == 0:
                print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π PDF: {pdf_path}")
                continue
            first_page = reader.pages[0]

            for _ in range(num_copies):
                writer = PdfWriter()
                writer.add_page(first_page)
                buffer = io.BytesIO()
                writer.write(buffer)
                buffer.seek(0)
                merger.append(buffer)

        except Exception as e:
            print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_path}: {e}")

    final_pdf_path = os.path.join(output_dir, f"{os.path.splitext(os.path.basename(p_file))[0]}_–ø–µ—á–∞—Ç—å.pdf")
    merger.write(final_pdf_path)
    merger.close()
    print(f"üìÑ PDF –¥–ª—è –≥—Ä—É–ø–ø—ã {idx} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {final_pdf_path}")

print("üéâ –í—Å–µ PDF-—Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
